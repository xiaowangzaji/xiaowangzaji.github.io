import{_ as s,c as a,b as h,o as k}from"./app-MVNBKL5t.js";const e={};function l(t,i){return k(),a("div",null,[...i[0]||(i[0]=[h('<h3 id="_1-cmake基本语法" tabindex="-1"><a class="header-anchor" href="#_1-cmake基本语法"><span>1.CMake基本语法</span></a></h3><p>（1）注释的语法：</p><ul><li>在CMake中注释使用#字符开始到此行结束。</li></ul><p>（2）C<a href="https://so.csdn.net/so/search?q=Make%E5%91%BD%E4%BB%A4&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">Make命令</a>：</p><ul><li><strong>命令不区分大小写（参数会区分大小写）</strong>，命令由命令、参数列表组成，参数之间使用空格进行分隔。</li><li>使用一对双引号包括的字符串认为是一个参数。</li><li>命令可以是一个内置命令（例如：project，add_executable等），也可以是一个用户定义的宏（macro）或者函数（function）。</li></ul><p>（3）数据类型：</p><ul><li><strong>CMake的基本数据类型是字符串，一组字符串在一起称为列表（list）</strong>，</li><li>例如：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 通过 set 命令构建一个 listVAR set(VAR a b c)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用语法 ${VariableName} 来访问名字为 VariableName 的变量的值（变量名区分大小写）。</li><li>需要注意的是，即使在字符串中也可以使用${VariableName} 来访问变量的值：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VAR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> c</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出 VAR = a;b;c message(&quot;VAR = ${VAR}&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用语法 $ENV{VariableName} 来访问环境变量的值（ENV{VariableName} 则表示环境变量本身）</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出环境变量 PATH 的值 message($ENV{PATH})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（4）条件控制和循环结构</p><ul><li>条件控制命令为 if 命令</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expression</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#... elseif(expression2) #... else() #... endif()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>eg：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 当 variable 不为 空值，1，TRUE、ON时为真 if (NOT variable) # 当 variable 为 空值，0，FALSE，OFF 或者 NOTFOUND 时为真 if (variable1 AND variable2) # 当 variable1, variable1 同时不为 空值，0，FALSE，OFF 或者 NOTFOUND 时为真 if (variable1 OR variable2) # 当 variable1, variable1 有一个不为 空值，0，FALSE，OFF 或者 NOTFOUND 时为真 if (COMMAND command-name) # 当 command-name 是可调用的命令时为真 if (DEFINED variable) # 当 variable 已经被设置了值时为真 if (EXISTS file-name) if (EXISTS directory-name) # 当指定的文件或者目录时为真 if (IS_DIRECTORY name) if (IS_ABSOLUTE name) # 当 name 是目录或者是绝对路径是为真 if (name1 IS_NEWER_THAN name2) # 当 name1 文件的修改时间比 name2 文件的修改时间要新时为真 if (variable MATCHES regex) if (string MATCHES regex) # 当给定的变量或者字符串与给定的正则表达式相匹配时为真</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>对于 if(string) 来说：<br> （1）如果 string 为（<strong>不区分大小写</strong>）1、ON、YES、TRUE、Y、非 0 的数则表示真<br> （2）如果 string 为（<strong>不区分大小写</strong>）0、OFF、NO、FALSE、N、IGNORE、空字符串、以 -NOTFOUND 结尾的字符串则表示假<br> （3）如果 string 不符合上面两种情况，则 string 被认为是一个变量的名字。<br> 变量的值为第二条所述的各值则表示假，否则表示真。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 此策略（Policy）在 CMake2.8.0 才被引入 # 因此这里需要指定最低 CMake 版本为 2.8 cmake_minimum_required(VERSION 2.8) set(YES 0) # 输出 True if(YES) message(True) else() message(False) endif() # 输出 False if(${YES}) message(True) else() message(False) endif()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>表达式中<strong>可以包含操作符</strong>，操作符包括：<br> （1）一元操作符，例如：EXISTS、COMMAND、DEFINED 等<br> （2）二元操作符，例如：EQUAL、LESS、GREATER、STRLESS、STRGREATER 等<br> （3）NOT（非操作符）<br> （4）AND（与操作符）、OR（或操作符）<br> （5）操作符优先级：一元操作符 &gt; 二元操作符 &gt; NOT &gt; AND、OR</li><li>常用操作符介绍：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">NOT</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expression</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 expression 为假 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> AND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expr2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 expr1 和 expr2 都为真 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expr2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 expr1 或者 expr2 为真 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> command-name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是存在 command-name 命令、宏或函数且能够被调用 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXISTS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是存在 name 的文件或者目录（应该使用绝对路径） if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">file1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IS_NEWER_THAN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 file1 比 file2 新或者 file1、file2 中有一个文件不存在（应该使用绝对路径） if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">IS_DIRECTORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory-name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 directory-name 表示的是一个目录（应该使用绝对路径） if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MATCHES</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> regex</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是变量值或者字符串匹配 regex 正则表达式 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> LESS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> GREATER</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> EQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是变量值或者字符串为有效的数字且满足小于（大于、等于）的条件 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> STRLESS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> STRGREATER</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是变量值或者字符串以字典序满足小于（大于、等于）的条件 if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">DEFINED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) //为真的前提是 variable 表示的变量被定义了。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>foreach 循环范例：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VAR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> c</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) foreach(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">VAR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">endforeach</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>while 循环范例：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VAR</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) while(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">VAR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> GREATER 0) message(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">VAR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) math(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> VAR</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VAR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> - 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">endwhile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（5）函数和宏定义</p><ul><li><strong>函数会为变量创建一个局部作用域，而宏则使用全局作用域。</strong></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">在一个</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或者</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 定义后，就可以被任何在它定义之后处理的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMakeLists</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件中使用。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 在macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中有一些预定义的标准参数，ARGV0,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 分别表示</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 传入的第一个参数和第二个参数。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 是</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 所有参数的一个列表，ARGN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 是表示传入</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的在正式定义参数之后传入的不定形式的参数的列表。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>function</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　CMake</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 与</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或者是</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C++</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中的函数很像，可以传递参数到</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中当作变量使用。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　 function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中，一些例如</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGC,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGN,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV0,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的标准变量已经被定义。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 在</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中是一个新的变量作用域，</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 与使用</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add_subdirectory</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 命令进入子目录产生的新变量作用域一样，所有在调用</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 时已定义的变量在</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中仍然被定义，但是对变量的修改以及定义新的变量只在这个</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中起作用，函数返回后这些变量就被移除了。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 定义</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 时，第一个参数是</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的名称，剩余的其他参数都会传递到</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中当变量使用。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (name </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">argv1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># do something here set (${argv1} &quot;val&quot; PARENT_SCOPE) endfunction () 在 function 中，使用带 PARENT_SCOPE 选项的 set 命令可以修改父作用域的中变量的值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>eg：定义一个可在CMake脚本其他位置调用的函数。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">定义一个函数名为</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;name&gt;，参数名为arg1 </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">arg2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">…</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arg1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arg2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arg3 ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]])</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> COMMAND1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ARGS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> COMMAND2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ARGS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> endfunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 函数体内的命令直到函数被调用的时候才会去执行。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 其中ARGC变量表示传递给函数的参数个数。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV0,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV1,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV2代表传递给函数的实际参数。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGN代表超出最后一个预期参数的参数列表，例如，函数原型声明时，只接受一个参数，那么调用函数时传递给函数的参数列表中，从第二个参数（如果有的话）开始就会保存到ARGN。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>测试：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake_minimum_required(VERSION</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) project(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ArgumentExpansion</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) function (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">argument_tester</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGN: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGC: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGV: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGV</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGV0: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ARGV0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) list(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">LENGTH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv_len</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">length of ARGV: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">argv_len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) set(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">i</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) while( </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> LESS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">argv_len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) list(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv_value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">STATUS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">argv_value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) math(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> i</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> + 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">endwhile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> endfunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> argument_tester</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>结果：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">结果：</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGN:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg3</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGC:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arg3</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV0:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV1:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> length</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARGV:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv0:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv1:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv2:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv3:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> arg3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>macro</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的定义和调用方式与</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 一样，但与</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> function</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 最主要的不同是</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 不会产生新的变量作用域。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中的参数不是当作变量，而是当作在执行前进行替换的字符串。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 这与</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C++</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中，</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 函数与宏定义的区别是一样的。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的第一个参数是创建的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的名称，剩余的其他参数是</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的中的参数。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> macro</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (name </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">argv1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> argv2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># do something here endmacro (name) macro 也支持使用参数列表来进行宏替换，参数可以使用 ARGC, ARGV0, ARGV1 等来进行引用， 其含义与 function 中的一样。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>范例：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 定义一个宏 hello macro(hello MESSAGE) message(${MESSAGE}) endmacro() # 调用宏 hello hello(&quot;hello world&quot;) # 定义一个函数 hello function(hello MESSAGE) message(${MESSAGE}) endfunction()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>函数和宏可以通过命令 return() 返回，<strong>但是函数和宏的返回值必须通过参数传递出去。</strong></li><li>例如：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake_minimum_required(VERSION</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) function(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get_func</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RESULT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#RESULT 的值为实参的值，因此需要使用 ${RESULT} #这里使用 PARENT_SCOPE 是因为函数会构建一个局部作用域 # set(${RESULT} &quot;hello get_func&quot;)不会有输出 set(${RESULT} &quot;Hello Function&quot; PARENT_SCOPE) endfunction() macro(get_macro RESULT) set(${RESULT} &quot;Hello Macro&quot;) endmacro() get_func(V1) # 输出 Hello Function message(${V1}) get_macro(V2) # 输出 Hello Macro message(${V2})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字符串的一些问题</p><ul><li>字符串可跨行且支持转移字符</li><li>例如：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">VAR</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello world</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出结果为： # ${VAR} = hello # world message(&quot;\\${VAR} = ${VAR}&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-cmake常用命令" tabindex="-1"><a class="header-anchor" href="#_2-cmake常用命令"><span>2.cmake常用命令</span></a></h3><p>常用命令：</p><ul><li>其他命令请查询：<a href="https://cmake.org/cmake/help/v2.8.8/cmake.html#section_Commands" target="_blank" rel="noopener noreferrer">链接</a></li></ul><p>（1）project 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：project(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;projectname&gt; [languageName1 </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">languageName2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> …</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ) 　　命令简述：用于指定项目的名称 　　使用范例：project(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Main</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）cmake_minimum_required命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：cmake_minimum_required(VERSION</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> major[.minor[.patch[.tweak]]][FATAL_ERROR]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于指定需要的 CMake 的最低版本 　　使用范例：cmake_minimum_required(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（3）<a href="https://so.csdn.net/so/search?q=aux_source_directory&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">aux_source_directory</a>命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：aux_source_directory(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;dir&gt; </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">variabl</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于将 dir 目录下的所有源文件的名字保存在变量 variable 中 　　使用范例：aux_source_directory(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> DIR_SRCS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（4）add_executable 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：add_executable(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;name&gt; [WIN32] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MACOSX_BUNDLE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXCLUDE_FROM_ALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> source1 source2 … sourceN) 　　命令简述：用于指定从一组源文件 source1 source2 … sourceN 编译出一个可执行文件且命名为 name 　　使用范例：add_executable(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">DIR_SRCS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（5）add_library 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：add_library([STATIC</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SHARED</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MODULE]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [EXCLUDE_FROM_ALL] source1source2 … sourceN) 　　命令简述：用于指定从一组源文件 source1 source2 … sourceN 编译出一个库文件且命名为 name（默认为静态库） 　　使用范例：add_library(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Lib</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">DIR_SRCS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（6）add_dependencies 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：add_dependencies(target-name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> depend-target1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> depend-target2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> …</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于指定某个目标（可执行文件或者库文件）依赖于其他的目标。 　　这里的目标必须是 add_executable、add_library、add_custom_target 命令创建的目标</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（7）add_subdirectory 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：add_subdirectory(source_dir</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [binary_dir] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXCLUDE_FROM_ALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于添加一个需要进行构建的子目录 　　使用范例：add_subdirectory(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Lib</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（8）target_link_libraries命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：target_link_libraries(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;target&gt; [item1 [item2 […]]]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">debug</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">optimized</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">general] ] …) 　　命令简述：用于指定 target 需要链接 item1 item2 …。这里 target 必须已经被创建，链接的 item 可以是已经存在的 target（依赖关系会自动添加） 　　使用范例：target_link_libraries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Lib</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（9）set 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：set(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;variable&gt; </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">valu</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [[CACHE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">typ</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e&gt;&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">docstrin</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">g</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [FORCE]] </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> PARENT_SCOPE]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于设定变量 variable 的值为 value。如果指定了 CACHE 变量，将被放入 Cache（缓存）中。 　　使用范例：set(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ProjectName</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Main</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（10）unset 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：unset(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;variable&gt; [CACHE]) 　　命令简述：用于移除变量 variable。如果指定了 CACHE 变量将被从 Cache 中移除。 　　使用范例：unset(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VAR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CACHE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（11）message 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：message([STATUS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WARNING</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AUTHOR_WARNING</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FATAL_ERROR</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SEND_ERROR]</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> “message</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> todisplay”…</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于输出信息 　　使用范例：message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">“Hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> World”</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（12）include_directories 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：include_directories([AFTER</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">BEFORE]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [SYSTEM] dir1 dir2 …) 　　命令简述：用于设定目录，这些设定的目录将被编译器用来查找 include 文件 　　使用范例：include_directories(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PROJECT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（13）find_path 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">命令语法：find_path(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;VAR&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [path1 </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> …]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于查找包含文件name1的路径，如果找到则将路径保存在VAR中（此路径为一个绝对路径）， 　　如果没有找到，则结果为 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">VAR</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-NOTFOUND。 　　默认的情况下，VAR 会被保存在 Cache 中，这时候我们需要清除 VAR 才可以进行下一次查询（使用 unset 命令）。 　　使用范例： 　　find_path(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">LUA_INCLUDE_PATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lua.h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">LUA_INCLUDE_FIND_PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">NOT</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> LUA_INCLUDE_PATH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SEND_ERROR</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Header file lua.h not found</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　endif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（14）find_library 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：find_library(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;VAR&gt; </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [path1 </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> …]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于查找库文件 name1 的路径，如果找到则将路径保存在 VAR 中（此路径为一个绝对路径）， 　　如果没有找到则结果为 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">VAR</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-NOTFOUND。 　　一个类似的命令 link_directories 已经不太建议使用了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（15）add_definitions 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令语法：add_definitions(-DFOO</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -DBAR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> …</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 　　命令简述：用于添加编译器命令行标志（选项），通常的情况下我们使用其来添加预处理器定义 　　使用范例：add_definitions(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-D_UNICODE</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -DUNICODE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（16）execute_process 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">命令语法：</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> execute_process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COMMAND</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cmd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">1&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[args1...]]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [COMMAND </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cmd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">2&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[args2...]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [...]] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">WORKING_DIRECTORY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">directory</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TIMEOUT </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">seconds</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RESULT_VARIABLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT_VARIABLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ERROR_VARIABLE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">variable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">INPUT_FILE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT_FILE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ERROR_FILE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">file</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT_QUIET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ERROR_QUIET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OUTPUT_STRIP_TRAILING_WHITESPACE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ERROR_STRIP_TRAILING_WHITESPACE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　命令简述：用于执行一个或者多个外部命令。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　每一个命令的标准输出通过管道转为下一个命令的标准输入。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　WORKING_DIRECTORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于指定外部命令的工作目录，RESULT_VARIABLE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于指定一个变量保存外部命令执行的结果，</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　这个结果可能是最后一个执行的外部命令的退出码或者是一个描述错误条件的字符串，</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　OUTPUT_VARIABLE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或者</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ERROR_VARIABLE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于指定一个变量保存标准输出或者标准错误，OUTPUT_QUIET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或者</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ERROR_QUIET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于忽略标准输出和标准错误。</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　使用范例：execute_process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（18）file 命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">　　命令简述：此命令提供了丰富的文件和目录的相关操作（这里仅说一下比较常用的）</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　使用范例：</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 目录的遍历</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> GLOB</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于产生一个文件（目录）路径列表并保存在variable</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 中</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件路径列表中的每个文件的文件名都能匹配globbing</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expressions（非正则表达式，但是类似）</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 如果指定了</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RELATIVE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 路径，那么返回的文件路径列表中的路径为相对于</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RELATIVE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的路径</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GLOB</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [RELATIVE </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path][globbing</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expressions]...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 获取当前目录下的所有的文件（目录）的路径并保存到</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ALL_FILE_PATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 变量中</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GLOB</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ALL_FILE_PATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 获取当前目录下的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件的文件名并保存到ALL_H_FILE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 变量中</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 这里的变量CMAKE_CURRENT_LIST_DIR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 表示正在处理的</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMakeLists.txt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件的所在的目录的绝对路径（2.8.3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 以及以后版本才支持）</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 　　file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GLOB</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ALL_H_FILE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RELATIVE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_LIST_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_CURRENT_LIST_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-cmake常用变量" tabindex="-1"><a class="header-anchor" href="#_3-cmake常用变量"><span>3.CMake常用变量</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">UNIX</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 如果为真，表示为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> UNIX-like</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的系统，包括</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> AppleOS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> X</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 和</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CygWin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> WIN32</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 如果为真，表示为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Windows</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 系统，包括</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CygWin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> APPLE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 如果为真，表示为</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Apple</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 系统</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMAKE_SIZEOF_VOID_P</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 表示</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> void</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的大小（例如为</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或者</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8），可以使用其来判断当前构建为</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 位还是</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 64</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 位</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMAKE_CURRENT_LIST_DIR</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 表示正在处理的CMakeLists.txt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 文件的所在的目录的绝对路径（2.8.3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 以及以后版本才支持）</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于设置</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ARCHIVE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 目标的输出路径</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMAKE_LIBRARY_OUTPUT_DIRECTORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于设置</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> LIBRARY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 目标的输出路径</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CMAKE_RUNTIME_OUTPUT_DIRECTORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 用于设置</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RUNTIME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 目标的输出路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-使用模块" tabindex="-1"><a class="header-anchor" href="#_4-使用模块"><span>4.使用模块</span></a></h3><p>CMake 通过使用模块的方式来支持代码重用。</p><ul><li>模块是一段在一个文件中的 CMake 命令， 它们可以通过 include 命令包含进其他的 CMakeLists 文件中。</li><li>一个模块的位置可以通过绝对路径来指定，也可以让 CMake 自己查找。CMake 会在 CMAKE_MODULE_PATH 指定的文件里查找模块。如果没有找到 CMake 就会在自己的模块子目录下查找。</li></ul><p>模块可以主要分为以下的三类：</p><ul><li>(1) Find Modlues<br><strong>这些模块决定了软件元素的位置，如头文件和库</strong>。<br> CMake 包含很多的 Find Modlues，Find Modlues 用来定位软件元素的的位置，如果没有找到，它们会提供一个缓存记录使得用户可以设置它们的需要的值。<br> 　　<strong>find_path 命令用来定位头文件的位置</strong>，命令的第一个参数是用来存储结果的变量名称，第二个参数是需要查找的头文件名称，剩余的参数是用来寻找头文件的路径：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find_path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (VARIABLE_NAME </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">includefile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) 当头文件没有找到时，VARIABLE_NAME 变量会被设置为 VARIABLE_NAME-NOTFOUND。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>find_library 命令用来寻找真正的库文件，这个命令执行了额外的检查来寻找一个合适的的库名称，如在 linux 系统中会在名称前添加 lib，在结尾添加 .so。find_library 命令的调用方式与 find_path 命令类似：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find_path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (VARIABLE_NAME </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">libraryfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>在 CMake 中寻找模块的基本文件结构如下：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find_path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (MODULE_INCLUDE_DIR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">header.h</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) find_library (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_LIBRARY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> library</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> path2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_LIBRARY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) if(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_INCLUDE_DIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) set (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_FOUND</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">YES</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">endif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> endif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>(2) System Introspection Modules</p><ul><li>这些模块提供了目标平台或编译器的相关信息，如 float 的长度，支持 ANSI C++ 流等。它们的模块名称通常有 Test 或者 Check 的前缀。为了产生正确的编译结果，大多数的 System Introspection Modules 参与到代码的编译过程中，它们的源代码通常有和模块一样的名称，并以 .c 或 .cxx 后缀结尾。</li></ul><p>(3) Utility Modlues</p><ul><li>Utility Modlues 模块提供了额外的功能，如支持一个 CMake 工程依赖另一个的的情形。CMake 包含了一些 Utility Modlues 用来帮助 CMake 的使用。CMakeExportBuildSetting 和 CMakeImportBuildSetting 提供了工具用来区分两个用相同的编译器和关键标志进行编译的 C++ 项目。CMakePrintSystemInformation 模块用来打印 CMake 的关键设置来帮助调试。</li></ul><h3 id="_5-add-custom-command和add-custom-target的使用" tabindex="-1"><a class="header-anchor" href="#_5-add-custom-command和add-custom-target的使用"><span>5.add_custom_command和add_custom_target的使用</span></a></h3><p>add_custom_command是在CMake构建时使用的，如果add_custom_command的输出没有成为其他Target的依赖的话，那么在编译期，是不会运行的。</p><ul><li>参考：<a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter5-5.3-chinese.md" target="_blank" rel="noopener noreferrer">5.3 构建时运行自定义命令:Ⅰ. 使用add_custom_command</a>，<a href="https://www.bookstack.cn/read/CMake-Cookbook/content-chapter5-5.4-chinese.md" target="_blank" rel="noopener noreferrer">5.4 构建时运行自定义命令:Ⅱ. 使用add_custom_target</a></li></ul><p>所以一般需要配合生成target的函数去使用，目的是让其作为其他Target的依赖</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add_executable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_custom_target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>eg：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">project(WANGJI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) cmake_minimum_required(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.24</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) add_executable(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.cpp</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) execute_process(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">BBBBBBBBBBB</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OUTPUT_VARIABLE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RESULT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) message(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;RESULT: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">RESULT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) add_custom_command(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OUTPUT</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TEST</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> COMMAND</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> touch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/abc.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) add_custom_target(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;abc&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ALL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> DEPENDS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TEST</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">##不会touch文件 cmake -B build ##会touch文件 cmake --build build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参考：<a href="https://www.cnblogs.com/Long-w/p/9587808.html" target="_blank" rel="noopener noreferrer">2、cmake的基本语法和常用命令</a>，<a href="https://blog.csdn.net/lixiang19910909/article/details/78142411" target="_blank" rel="noopener noreferrer">CMake 基本语法（Mastering CMake 笔记）</a>，<a href="https://blog.csdn.net/fuyajun01/article/details/9036443" target="_blank" rel="noopener noreferrer">CMake命令之function</a>，<a href="https://www.programminghunter.com/article/834163968/#:~:text=%E4%B8%80%E3%80%81%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D%20cmake_parse_arguments%20%E4%B8%BA%E8%A7%A3%E6%9E%90%E5%87%BD%E6%95%B0%EF%BC%88function%EF%BC%89%E6%88%96%20%E5%AE%8F%EF%BC%88macros%EF%BC%89%20%E5%8F%82%E6%95%B0%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%9B%20cmake_parse_arguments%20%28%3Cprefix%3E%20%3Coptions%3E,%28PARSE_ARGV%20%3CN%3E%20%3Cprefix%3E%20%3Coptions%3E%20%3Cone_value_keywords%3E%20%3Cmulti_value_keywords%3E%29%201.1%20%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener noreferrer">cmake学习之- cmake_parse_arguments</a></li></ul>',107)])])}const p=s(e,[["render",l]]),r=JSON.parse('{"path":"/Code/CPP/CMakeBase/","title":"基础语法","lang":"zh-CN","frontmatter":{"title":"基础语法","createTime":"2025/05/08 22:44:07","permalink":"/Code/CPP/CMakeBase/"},"readingTime":{"minutes":15.31,"words":4594},"git":{},"filePathRelative":"notes/Code/CPP/CMake/basic.md","headers":[]}');export{p as comp,r as data};
