import{_ as a,c as t,b as i,o as l}from"./app-MVNBKL5t.js";const c={};function o(d,e){return l(),t("div",null,[...e[0]||(e[0]=[i('<p>C++ 是一门由丹麦计算机科学家 Bjarne Stroustrup 于 1983 年在 C 语言基础上开发的通用编程语言，核心定位是 “带类的 C 语言”（早期名称），后逐步发展为支持多范式的高效语言，兼具 C 语言的底层操控能力与面向对象编程（OOP）的抽象特性，广泛应用于系统开发、游戏引擎、嵌入式设备、高性能计算等领域。</p><h2 id="一、c-的核心特性-多范式融合" tabindex="-1"><a class="header-anchor" href="#一、c-的核心特性-多范式融合"><span>一、C++ 的核心特性：多范式融合</span></a></h2><p>C++ 并非单一范式语言，而是支持 面向过程、面向对象、泛型编程、函数式编程 等多种编程风格，能根据场景灵活选择最合适的开发方式，这也是其长期流行的关键原因。</p><h3 id="_1-兼容-c-语言-底层操控能力" tabindex="-1"><a class="header-anchor" href="#_1-兼容-c-语言-底层操控能力"><span>1. 兼容 C 语言：底层操控能力</span></a></h3><p>C++ 完全兼容 C 语言语法（大部分 C 代码可直接在 C++ 编译器中运行），继承了 C 语言对硬件的直接操控能力</p><p>例如：</p><ul><li>支持 指针（直接操作内存地址）；</li><li>支持 内存手动管理（new 分配内存、delete 释放内存）；</li><li>保留 C 语言的基础数据类型（int、char、float）、流程控制（if-else、for、while）和库（如 <code>&lt;stdio.h&gt;</code>，C++ 中对应 <code>&lt;cstdio&gt;</code>）。</li></ul><p>这一特性让 C++ 既能处理底层系统（如操作系统内核、驱动程序），也能兼顾上层应用开发。</p><h3 id="_2-面向对象编程-oop-代码复用与抽象" tabindex="-1"><a class="header-anchor" href="#_2-面向对象编程-oop-代码复用与抽象"><span>2. 面向对象编程（OOP）：代码复用与抽象</span></a></h3><p>C++ 引入了 类（class）和对象（object） 这一核心概念，实现了面向对象的三大特性：</p><ul><li><p>封装：将数据（成员变量）和操作数据的方法（成员函数）封装在类中，隐藏内部实现细节，仅对外暴露接口（如通过 public/private 控制访问权限）；</p></li><li><p>继承：子类可继承父类的属性和方法，减少重复代码，并支持 “多态” 的基础；</p></li><li><p>多态：通过 虚函数（virtual function） 实现 “同一接口，不同行为”，让代码更灵活；</p></li></ul><h3 id="_3-泛型编程-跨类型代码复用" tabindex="-1"><a class="header-anchor" href="#_3-泛型编程-跨类型代码复用"><span>3. 泛型编程：跨类型代码复用</span></a></h3><p>C++ 引入 模板（template） 机制，支持 “编写与类型无关的代码”，核心应用是 标准模板库（STL）： 模板允许定义 “通用函数” 或 “通用类”，编译时根据传入的具体类型生成对应代码；</p><p>STL 是 C++ 标准库的核心，提供了大量现成的通用数据结构和算法，</p><p>例如：</p><ul><li>数据结构：<code>vector</code>（动态数组）、<code>list</code>（链表）、<code>map</code>（键值对映射）；</li><li>算法：<code>sort</code>（排序）、<code>find</code>（查找）、<code>reverse</code>（反转）。 借助 STL，开发者无需重复实现基础功能，大幅提升开发效率。</li></ul><h3 id="_4-其他关键特性" tabindex="-1"><a class="header-anchor" href="#_4-其他关键特性"><span>4. 其他关键特性</span></a></h3><ul><li>异常处理：通过 try-catch-throw 机制捕获和处理运行时错误（如内存分配失败、数组越界），增强程序健壮性；</li><li>引用（reference）：作为变量的 “别名”，比指针更安全（无空引用），常用于函数参数传递和返回值；</li><li>命名空间（namespace）：解决同名标识符冲突（如 std::cout 中的 std 是标准库的命名空间，避免与自定义的 cout 冲突）。</li></ul>',18)])])}const r=a(c,[["render",o]]),s=JSON.parse('{"path":"/Code/CPP/","title":"C++介绍","lang":"zh-CN","frontmatter":{"title":"C++介绍","createTime":"2025/03/21 23:15:04","permalink":"/Code/CPP/","tags":["C++"]},"readingTime":{"minutes":2.61,"words":784},"git":{},"filePathRelative":"notes/Code/CPP/README.md","headers":[]}');export{r as comp,s as data};
